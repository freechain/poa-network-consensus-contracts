{
  "stats": {
    "suites": 63,
    "tests": 189,
    "passes": 189,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-12T11:12:22.765Z",
    "end": "2018-04-12T11:15:03.680Z",
    "duration": 160915,
    "testsRegistered": 189,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "aaeef556-590f-40a9-b4bf-a79d27b62a6d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e885ef39-7e11-4747-b62f-765d2d19311a",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c9f0a0d-e6c6-42a5-9fce-ec1bdc5de2fd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ba88d4b6-6bb1-460e-821d-559385a7c1a9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "64e89c72-70f2-44f6-8088-f505af523a28",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9a3bbce0-8819-4180-8573-7794d022abf6",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "bda11bb4-ae53-4d3b-b3bd-348aef99052a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4f6826e0-8ce4-44d2-a36c-18a394d732af",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3eb81913-48a9-44fa-af0a-73f1c926b659",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c9a6f90f-68f4-44ad-a81f-79c7b2d5d14a",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "88bdba53-99bc-4a62-8431-9988c17640f1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d0f7f3b5-9b52-4acd-8c41-d1036fdb0289",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "58c5c651-56c3-4169-9b90-9f86096e6fe0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1d592e8d-c723-44aa-989b-01b65bd3d308",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6e0c33df-2f6b-418a-a623-4424ad7d2dcd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9663de5e-cd0e-4105-8e0d-761a2a0e0213",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e0ab05b2-dcc5-4e16-8890-b5fd24408dd0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "da490d1a-301e-45bb-8c67-d7a1f78c9041",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "03edb90f-9bca-445b-9f1b-328eefbf5c2e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a003d090-5dfb-4d92-8d44-4b7003d01b2d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fd24fc91-85a5-40ba-b429-085227b68e72",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "48143a79-287e-4b0b-98db-88c6992c6565",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "46c7b6c9-2c64-466c-a214-02aec5e5d8a9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "11a20e1e-df14-427e-9ac8-be0c5da0a1d7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "81781436-1c5f-40d2-8942-3d5730705dc3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "18ebe140-4e50-4729-b4d1-d2cdba46b43d",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "c95a2039-cbc3-474a-9ac9-cfbb7ebd6ae8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c8111dbc-b43b-41a6-9c52-f87a05ac5b26",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9bf8e95a-f151-4b37-8846-fde49fcabcb6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a15b229c-29ba-45bc-a983-51d0793aa206",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "81d7e91d-9f3a-4f18-ba63-7db5bef0aa2c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e1d8674e-556f-474f-9c0b-3b711b861054",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c00d6684-5cd0-4a8d-abb8-2f4d8bcbd970",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1759655-b2fe-4ad2-8281-94e65c6d8956",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "82cbf897-e948-4e02-9c7b-4fbaf9f65351",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2dae1e33-a51a-4ef3-a487-c105e1265bad",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1d26ac64-f8da-4e25-ae79-0e3832f6cf48",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9903e7d9-b7dc-42a6-9f28-952018e33266",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "b4ed54b7-05ac-4ba4-aceb-39c1656680bb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8dc960f9-1823-4868-a981-0452c3f1ddf7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "856a8713-d1cf-4c01-af5c-0d826bcd645c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c760c4fd-efaa-4c90-aa67-44f69f867b39",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 88,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "5be20b84-c7f5-4436-9808-4e39dddbba37",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "847d86d1-c84f-4703-86f4-118af35c5996",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 271,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address);\nballotsStorageMock = await BallotsStorageMock.new(proxyStorage.address);\nkeysManager = await KeysManagerMock.new(proxyStorage.address, poaNetworkConsensus.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorageMock.address,\n  validatorMetadataEternalStorage\n);",
            "err": {},
            "isRoot": false,
            "uuid": "6fece12d-e18a-4aa3-9e45-ba355c79eef3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f24dbb57-949b-4630-940e-1266f0b52119",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0414f07e-9a46-46f2-8c7a-ff1be5272f25",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: BallotsStorage [all features] #constructor sets MoC and Poa",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f0fea9fe-eec0-450d-a0cb-d8606fb047c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0fea9fe-eec0-450d-a0cb-d8606fb047c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4390b633-6d08-435a-85a3-472b2456307c",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0572cca9-53d6-4ea5-a047-f37cc081553c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 0, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -10, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, 3, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c5647c93-4860-45ce-b737-eaa422fe3068",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(0, 1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(0, 2, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;\nawait ballotsStorageMock.setThreshold(4, 2, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ac2e10f8-5c46-48e2-b876-83b6e450c53e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 1, {from: accounts[3]}).should.be.fulfilled; \nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(1));",
                "err": {},
                "isRoot": false,
                "uuid": "0b759957-17e2-482b-a6a9-19e088b45103",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(6, 2, {from: accounts[3]}).should.be.fulfilled;\nnew web3.BigNumber(6).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(2));",
                "err": {},
                "isRoot": false,
                "uuid": "eb4431e3-8a34-42a9-8769-0844c8c5ac03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0572cca9-53d6-4ea5-a047-f37cc081553c",
              "c5647c93-4860-45ce-b737-eaa422fe3068",
              "ac2e10f8-5c46-48e2-b876-83b6e450c53e",
              "0b759957-17e2-482b-a6a9-19e088b45103",
              "eb4431e3-8a34-42a9-8769-0844c8c5ac03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 455,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0d76b6c0-c955-4efc-a381-7a6abb14029c",
            "title": "#getTotalNumberOfValidators",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getTotalNumberOfValidators returns total number of validators",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(masterOfCeremony);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(2).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorageMock.getTotalNumberOfValidators())",
                "err": {},
                "isRoot": false,
                "uuid": "c476eeeb-ded4-40e9-b307-66e2235809df",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c476eeeb-ded4-40e9-b307-66e2235809df"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 189,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f538e0e0-80ef-4736-8e5f-feda1de528db",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold returns total number of validators",
                "timedOut": false,
                "duration": 395,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.addValidator(accounts[2], true);\nawait poaNetworkConsensus.addValidator(accounts[3], true);\nawait poaNetworkConsensus.addValidator(accounts[4], true);\nawait poaNetworkConsensus.addValidator(accounts[5], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "a287b36d-be73-4f16-b8c5-e9646a245302",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a287b36d-be73-4f16-b8c5-e9646a245302"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 395,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b6b69ecb-18a8-4a51-bd36-c8a24f1ec098",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "c431789c-9ab2-48eb-bd97-d065929d6dc6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c431789c-9ab2-48eb-bd97-d065929d6dc6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b4ef7a32-0e2d-4559-8ea7-926dba165626",
            "title": "#getBallotLimit",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns limit per validator to create ballots",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimit returns limit per validator to create ballots",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(200);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "67cd9d9c-786a-4567-840a-51324f9d3a54",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67cd9d9c-786a-4567-840a-51324f9d3a54"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c0cd22a7-263c-4fb9-b74f-f43ea3c857e6",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 311,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c785e1df-3652-4008-94fd-ff9a93585dd5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e6c2f7ca-32a4-41f4-9bec-7cfbdc8d1da4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 220,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "67bba529-5b49-4ea8-9626-02267a0cf202",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0ae2de69-647c-49f2-a78b-a43385e04b68",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "e3672766-8be0-413b-abc5-3e771eb2c213",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus());",
                "err": {},
                "isRoot": false,
                "uuid": "640199cc-a1c8-4824-a541-0beec702dc92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f682b9a3-15b6-4ae6-ab87-1e1fac65ce92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "640199cc-a1c8-4824-a541-0beec702dc92",
              "f682b9a3-15b6-4ae6-ab87-1e1fac65ce92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "dc327352-b286-40ff-92e2-f5fc0bad342a",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ea6bce17-908a-446c-a4a1-c9ed2611b121",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c37a5786-d38a-4c61-90cb-e496f58a65c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d7b21348-04df-49c1-9935-ce729fdaeed9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "53ca1fef-0c01-4d13-8341-d6a821f8d4d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4192e646-6e10-4561-b29d-90ab462d71a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setMaxNumberOfInitialKeys(2);\nlet maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(2);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[3], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ec0ce8cd-7b7e-42d8-84d7-a157e6fc5fca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 424,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c46d6c90-fb45-483a-8978-7d8f0deefe2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "c6f5f761-55b8-4fe5-a74a-1dc15dd21f33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "532ffa2c-6aa0-4a7c-a86b-375baec5e6c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea6bce17-908a-446c-a4a1-c9ed2611b121",
              "c37a5786-d38a-4c61-90cb-e496f58a65c7",
              "d7b21348-04df-49c1-9935-ce729fdaeed9",
              "53ca1fef-0c01-4d13-8341-d6a821f8d4d0",
              "4192e646-6e10-4561-b29d-90ab462d71a2",
              "ec0ce8cd-7b7e-42d8-84d7-a157e6fc5fca",
              "c46d6c90-fb45-483a-8978-7d8f0deefe2e",
              "c6f5f761-55b8-4fe5-a74a-1dc15dd21f33",
              "532ffa2c-6aa0-4a7c-a86b-375baec5e6c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1020,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8c68b80d-deef-4ab2-ad0f-456bbf8b3352",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "09d2c4b2-4694-44e6-a510-64fece635c8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "58caa013-8ae3-4294-bb31-9afd196597cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4b5c07fa-cf69-4ef3-9359-89a463823de6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "81e4986e-65d1-4b89-81e4-61c304791bbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assigns voting <-> mining key relationship",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assigns voting <-> mining key relationship",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[3]);\nminingKey.should.be.equal(accounts[4]);",
                "err": {},
                "isRoot": false,
                "uuid": "c8e8600c-daaf-47e4-8718-1593e16f931c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.currentValidatorsLength();\n(await poaNetworkConsensusMock.pendingList(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "976bfeb1-f7da-439c-ae9b-ca59f576c41a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "7f61d1b4-a6ec-453e-851d-25f74f54a5ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "7ff70958-721c-4032-afd3-3b70b29e0734",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09d2c4b2-4694-44e6-a510-64fece635c8e",
              "58caa013-8ae3-4294-bb31-9afd196597cf",
              "4b5c07fa-cf69-4ef3-9359-89a463823de6",
              "81e4986e-65d1-4b89-81e4-61c304791bbf",
              "c8e8600c-daaf-47e4-8718-1593e16f931c",
              "976bfeb1-f7da-439c-ae9b-ca59f576c41a",
              "7f61d1b4-a6ec-453e-851d-25f74f54a5ec",
              "7ff70958-721c-4032-afd3-3b70b29e0734"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 955,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2c155f1f-999a-4f1f-870b-7f5d5205feea",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "320cc1ea-61a6-4c76-acfe-af371742108c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait keysManager.addMiningKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5650ad19-1c1c-4adc-9bba-43f0775180ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "6424e11b-711c-404f-8190-96de4ef45543",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "320cc1ea-61a6-4c76-acfe-af371742108c",
              "5650ad19-1c1c-4adc-9bba-43f0775180ab",
              "6424e11b-711c-404f-8190-96de4ef45543"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "31326282-f894-44b3-9c20-3083970f751a",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2],accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "28fff6c5-76e9-4358-9139-7c1c626fe437",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e93889d2-f5fd-41e3-934c-782e821df23e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nfalse.should.be.equal(await keysManager.isVotingActive(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[3]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5f8984d8-4c0f-401f-b97e-025a24fdebe3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28fff6c5-76e9-4358-9139-7c1c626fe437",
              "e93889d2-f5fd-41e3-934c-782e821df23e",
              "5f8984d8-4c0f-401f-b97e-025a24fdebe3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 490,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "dbb33a85-6dc5-48ea-a57a-fd465ae36c44",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addPayoutKey(accounts[2],accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "82c97651-4247-4478-8ddd-ceeaf2ee61b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9661e593-8159-45e9-9fb8-ac709d3e68f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isPayoutActive(accounts[1]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d8513933-0290-49f6-ac9a-97f3643eaa10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82c97651-4247-4478-8ddd-ceeaf2ee61b0",
              "9661e593-8159-45e9-9fb8-ac709d3e68f9",
              "d8513933-0290-49f6-ac9a-97f3643eaa10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b6bb9b87-76a1-4739-ac2d-7f903f6e57f7",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "bebee52c-3475-4785-be8d-04251f516e81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 319,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensusMock.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.currentValidatorsLength();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "748f038d-4bd9-45b4-89eb-96647f98a027",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "3fe0ad85-4a9d-4524-bdf7-384009ae0511",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bebee52c-3475-4785-be8d-04251f516e81",
              "748f038d-4bd9-45b4-89eb-96647f98a027",
              "3fe0ad85-4a9d-4524-bdf7-384009ae0511"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 733,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "59dcb3fb-cca9-43e7-aae1-46d2bfe0b477",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(mining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, mining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, mining).should.be.fulfilled;\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[1]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "3384b3e6-ead9-49e6-bf69-cccbebeced15",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3384b3e6-ead9-49e6-bf69-cccbebeced15"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 233,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ba5dc874-0881-49ac-a71c-f8b4f98d155e",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "5767a065-4936-4608-9422-afea947b91b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5767a065-4936-4608-9422-afea947b91b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8d8e5d6f-bf7d-454b-8418-a339c0b021cc",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.swapMiningKey(accounts[2], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(accounts[2]);\nvalidatorNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "a0d5b205-576e-4900-b492-79b309ae34fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 358,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait keysManager.addMiningKey(oldMining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, oldMining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, oldMining).should.be.fulfilled;\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\nconst mining = await keysManager.getMiningKeyByVoting(voting);\nconst validator = await keysManager.validatorKeys(oldMining);\nconst miningCheck = await keysManager.getMiningKeyByVoting(voting);\nminingCheck.should.be.equal(newMining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "6b116ada-e55d-4827-9c37-06c60052c6a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0d5b205-576e-4900-b492-79b309ae34fa",
              "6b116ada-e55d-4827-9c37-06c60052c6a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 562,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "85620007-b54a-449c-977d-920b21977feb",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1616d4d5-425a-4dce-99f1-17a34004ef14",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1616d4d5-425a-4dce-99f1-17a34004ef14"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 170,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5803b26f-485f-42fd-a51e-c4d92af3236e",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "db03f93b-210b-43df-a1c7-fb4e17f18505",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db03f93b-210b-43df-a1c7-fb4e17f18505"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5b26687c-ce91-405b-bdc0-0662ce2f1470",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\nlet newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager()\n)\nlet initialKeys = await newKeysManager.initialKeysCount();\ninitialKeys.should.be.bignumber.equal(1);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]);\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.initialKeys(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.initialKeys(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7ecb3d06-12e0-4952-bd5f-54e4bac11555",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey copies validator keys",
                "timedOut": false,
                "duration": 567,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// let masterOfCeremony = accounts[0];\nlet miningKey = accounts[2];\nlet votingKey = accounts[3];\nlet payoutKey = accounts[4];\nlet mining2 = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(mining2, {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\nconst validatorKeyFromOld = await keysManager.validatorKeys(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n])\nlet newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\n// mining #1\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey);\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nlet initialKeys = await newKeysManager.initialKeysCount();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n])\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(miningKey)\n)\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting(votingKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive(miningKey)\n)\n// mining#2\nawait newKeysManager.migrateMiningKey(mining2);\nconst validatorKey2 = await newKeysManager.validatorKeys(mining2);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n])\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive(mining2)\n)\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(mining2)\n)",
                "err": {},
                "isRoot": false,
                "uuid": "54e1173e-2fce-417b-8787-10649dfdca24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bfe3e677-0a44-4547-89a6-a3ca36b47e67",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ecb3d06-12e0-4952-bd5f-54e4bac11555",
              "54e1173e-2fce-417b-8787-10649dfdca24",
              "bfe3e677-0a44-4547-89a6-a3ca36b47e67"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 871,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f712df32-bed2-4f0c-ae17-cbe255e5dbd8",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 941,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "685081f2-56ae-4424-8cc4-f1ff5307f4bd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "70886398-f530-419f-a910-5f71757142a7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 680,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadata.new();\n   metadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\n   \n   await proxyStorageMock.initializeAddresses(\n     keysManager.address,\n     masterOfCeremony,\n     masterOfCeremony,\n     masterOfCeremony,\n     ballotsStorage.address,\n     metadataEternalStorage.address\n   );\n   \n   metadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n   \n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey3).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "37738fbc-7bde-4ec6-8e1b-ca7248ad24f3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6eb7e9cf-0526-4505-9bfd-4e4035fac33e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "efe9ca0f-82d8-45c9-9eef-75998326c638",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "621cfb30-b657-4e62-b41b-cbcfcc54bf3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "dbeb35bd-5665-42e2-a2bf-a629dfaaf134",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "90ab6bc0-d6ab-4088-be30-0748b26fa84d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "621cfb30-b657-4e62-b41b-cbcfcc54bf3b",
              "dbeb35bd-5665-42e2-a2bf-a629dfaaf134",
              "90ab6bc0-d6ab-4088-be30-0748b26fa84d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 328,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2f2554b6-d3f4-45ff-a7a6-78d8923f1011",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "ef2c06af-f25f-4c7c-9e9a-60ca1de41a0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ef2c06af-f25f-4c7c-9e9a-60ca1de41a0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ebf0a5e5-ed84-44f7-90da-89814e5c0372",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 76,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "69c7de60-5aff-497d-862a-b321cf7c3d0e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d31bea04-a5c5-466e-844e-99b24dc9b7fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5fadc263-e61e-4829-85b8-a8bdce43e2f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 395,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(2);\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(0);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "390d1321-c7d2-466e-9137-accd3979765d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d31bea04-a5c5-466e-844e-99b24dc9b7fe",
              "5fadc263-e61e-4829-85b8-a8bdce43e2f9",
              "390d1321-c7d2-466e-9137-accd3979765d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 614,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ff0f10d1-3e52-416c-92cd-eaae4e3382ad",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9b6e2bb8-9604-4c14-9815-a78ee63b9934",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "8f583424-815b-41b3-a220-9d7812ec20ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b6e2bb8-9604-4c14-9815-a78ee63b9934",
              "8f583424-815b-41b3-a220-9d7812ec20ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 742,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f8314ec4-4920-4e4d-bcf6-a5902a27e852",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "96236ab6-00b2-4824-823b-b5775bb0e42a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 227,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "5eece390-972a-4ee0-b0d5-a1f7fdf9677b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 248,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "8b16d4f4-97c4-41f1-834d-e8b8baac2dbf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96236ab6-00b2-4824-823b-b5775bb0e42a",
              "5eece390-972a-4ee0-b0d5-a1f7fdf9677b",
              "8b16d4f4-97c4-41f1-834d-e8b8baac2dbf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 681,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "68da1ddb-9405-4193-8f82-e1479c2c3f6f",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 511,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "eac67c3f-6c9f-44b7-a131-ad2fffa511f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eac67c3f-6c9f-44b7-a131-ad2fffa511f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 511,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8ce4dc72-6b4a-449e-a965-677664d4add5",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "08a0c6fd-c9aa-4e15-928a-59606cfc88db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08a0c6fd-c9aa-4e15-928a-59606cfc88db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "acb985bf-6d35-49e5-874a-56473806afa9",
            "title": "#setProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can request a new proxy address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #setProxyAddress can request a new proxy address",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(proxyStorageMock.address);\nconst {logs} = await metadata.setProxyAddress(newProxy, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingProxyStorage()).should.be.equal(newProxy);\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(1);\nlogs[0].event.should.be.equal(\"RequestForNewProxy\");\nlogs[0].args.newProxyAddress.should.be.equal(newProxy);\nawait metadata.confirmNewProxyAddress(newProxy, {from :votingKey2}).should.be.fulfilled;\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(2);\nlet final = await metadata.confirmNewProxyAddress(newProxy, {from: votingKey3}).should.be.fulfilled;\nfinal.logs[0].event.should.be.equal(\"ChangeProxyStorage\");\nfinal.logs[0].args.newProxyAddress.should.be.equal(newProxy);\n\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(newProxy);",
                "err": {},
                "isRoot": false,
                "uuid": "2e284177-ea6a-4d8b-b6a3-f9a92a397763",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e284177-ea6a-4d8b-b6a3-f9a92a397763"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 307,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0e8807d6-5695-4981-8b8a-e17573ac4a7c",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 85,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "metadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "1ea1c091-98b6-4f67-85e0-901e95ba7bf1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may be called only by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may be called only by ProxyStorage",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8b87998c-8216-4b8e-ba26-52a1178c0a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldImplementation = await metadata.implementation();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation()).should.be.equal(oldImplementation);\nawait metadataEternalStorage.upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.implementation()).should.be.equal(newImplementation);\n(await metadataEternalStorage.implementation()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "b74d8961-7c29-4ed2-a7b9-04e9df8d318e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadata.version();\nlet newVersion = oldVersion.add(1);\n(await metadataEternalStorage.version()).should.be.bignumber.equal(oldVersion);\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.version()).should.be.bignumber.equal(newVersion);\n(await metadataEternalStorage.version()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "44038651-96a3-4189-823d-a4a4cd8c166f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "170c1a9a-6562-465f-8d5a-1a1e4004aa0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "e073c4cc-4632-4dd5-81ba-7e41f49c14a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "1a903b2b-da6f-4876-987e-c479b51c578e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b87998c-8216-4b8e-ba26-52a1178c0a21",
              "b74d8961-7c29-4ed2-a7b9-04e9df8d318e",
              "44038651-96a3-4189-823d-a4a4cd8c166f",
              "170c1a9a-6562-465f-8d5a-1a1e4004aa0c",
              "e073c4cc-4632-4dd5-81ba-7e41f49c14a0",
              "1a903b2b-da6f-4876-987e-c479b51c578e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 841,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5c265884-08f4-45d9-b4aa-99bf664ea972",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1049,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "d16fd55c-0c02-4ebe-b563-4350d37aa3bf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ed339fb5-59c7-4fbb-87c4-eb0b3b038d54",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 733,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadata.new();\n   metadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\n   await proxyStorageMock.initializeAddresses(\n     keysManager.address,\n     masterOfCeremony,\n     masterOfCeremony,\n     masterOfCeremony,\n     ballotsStorage.address,\n     metadataEternalStorage.address\n   );\n   //metadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n   let metadataNew = await ValidatorMetadataNew.new();\n   await metadataEternalStorage.setProxyStorage(accounts[6]);\n   await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\n   await metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey3).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "d2b3194d-aa6a-49dc-b47f-a2aeb2115acb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a38c4439-c2e4-4e7d-bf2f-773964358ed4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "9daeff01-d7dc-4f21-85ae-97fc44e5f48a",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "dfcbdfea-1a4b-4619-b6e2-749c119a9d7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "e48729f1-0062-4f70-b0de-ab6d64db107f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6907fbc3-6cfc-4e15-91e0-391b5491bfd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfcbdfea-1a4b-4619-b6e2-749c119a9d7c",
              "e48729f1-0062-4f70-b0de-ab6d64db107f",
              "6907fbc3-6cfc-4e15-91e0-391b5491bfd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "034eb61b-b5c4-4777-b5bd-3201e261c540",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "dba7efb1-2c43-486f-afb7-a574ad628394",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dba7efb1-2c43-486f-afb7-a574ad628394"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 49,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "25d86531-d96a-4299-a1f9-13bf2540a096",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 80,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3bb26cf1-2683-4c50-8b30-77173f88a6b3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\npendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2c6d6e09-3b49-471f-a886-90d6e3745912",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d23e3e28-ba2a-4a03-a40b-20c8f447d974",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 436,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(2);\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(0);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "aab488ec-6b4c-4520-97f5-398bcb2f0306",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c6d6e09-3b49-471f-a886-90d6e3745912",
              "d23e3e28-ba2a-4a03-a40b-20c8f447d974",
              "aab488ec-6b4c-4520-97f5-398bcb2f0306"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 593,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9d49e007-9818-493d-a900-e34cf361d2a3",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 378,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "665a4a1b-e15c-426f-b0a8-8235559beca4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 336,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "debb0783-cbbc-468f-b8d4-78d740a7b69f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "665a4a1b-e15c-426f-b0a8-8235559beca4",
              "debb0783-cbbc-468f-b8d4-78d740a7b69f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 714,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d42bb34f-bc3f-4fe2-8999-5063765c9eed",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "18bfa4ff-ff66-4bf5-9cfe-87a98215e202",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "17d96131-2317-402a-b5df-1acbf2214232",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 252,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "f59f895f-ec11-429d-bdbe-09bf790b7fc8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "18bfa4ff-ff66-4bf5-9cfe-87a98215e202",
              "17d96131-2317-402a-b5df-1acbf2214232",
              "f59f895f-ec11-429d-bdbe-09bf790b7fc8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 660,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "59458f98-112f-4d5b-9892-c50eec5ec9c3",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 491,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "eaeda243-8d87-4d8c-9998-4f4738c8ed7d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eaeda243-8d87-4d8c-9998-4f4738c8ed7d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 491,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c1957162-bbd2-4b94-bf5e-950fd37ba579",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "c9765965-9204-462a-b9e6-a50e6c8a00ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9765965-9204-462a-b9e6-a50e6c8a00ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4778a71e-dd13-4203-a264-63f54615dac7",
            "title": "#setProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can request a new proxy address",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #setProxyAddress can request a new proxy address",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(proxyStorageMock.address);\nconst {logs} = await metadata.setProxyAddress(newProxy, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingProxyStorage()).should.be.equal(newProxy);\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(1);\nlogs[0].event.should.be.equal(\"RequestForNewProxy\");\nlogs[0].args.newProxyAddress.should.be.equal(newProxy);\nawait metadata.confirmNewProxyAddress(newProxy, {from :votingKey2}).should.be.fulfilled;\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(2);\nlet final = await metadata.confirmNewProxyAddress(newProxy, {from: votingKey3}).should.be.fulfilled;\nfinal.logs[0].event.should.be.equal(\"ChangeProxyStorage\");\nfinal.logs[0].args.newProxyAddress.should.be.equal(newProxy);\n\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(newProxy);",
                "err": {},
                "isRoot": false,
                "uuid": "c7744fd6-5ce8-4d5d-b830-eeac7f54d0c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7744fd6-5ce8-4d5d-b830-eeac7f54d0c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "300c0aa0-dab4-4e98-a606-5436de455d76",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 987,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "f68d54ac-85ab-4880-b543-a77c62fd7a27",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "08b54e58-26bf-43e9-ae54-cb2201b54bc5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 191,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensus.address);\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "3d8c4616-056c-408f-b1d6-794a41e8d130",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1885eb7d-0f12-4905-92b0-a89856c9702e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "72f6fefd-adf5-4be3-9da9-d42c00d00801",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators();\nlet finalized = await poaNetworkConsensus.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "433d50c7-c72e-4ad7-9a89-66e80582bc6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "cb7028f3-c1a7-40da-bf80-c49cac389572",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList);\nlet validators = await poa.getValidators();\nlet finalized = await poa.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony,\n    ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "28416673-7359-4c46-b285-4c36f451a92a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "433d50c7-c72e-4ad7-9a89-66e80582bc6f",
              "cb7028f3-c1a7-40da-bf80-c49cac389572",
              "28416673-7359-4c46-b285-4c36f451a92a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 143,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "59569301-1156-41bf-b193-aeeed6075c2a",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "405adaa4-ae0d-4451-b11c-4ef8933db1bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c8bc4652-9389-45ef-bbe7-b4d2cb5c731b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "3cf7ddbf-ff43-4f4f-a910-f522421a38de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait poaNetworkConsensus.addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "a97a5c47-dea3-4acc-b378-408f513fbb27",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "405adaa4-ae0d-4451-b11c-4ef8933db1bc",
              "c8bc4652-9389-45ef-bbe7-b4d2cb5c731b",
              "3cf7ddbf-ff43-4f4f-a910-f522421a38de",
              "a97a5c47-dea3-4acc-b378-408f513fbb27"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 608,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4fde6176-ff42-4a79-9edd-cd16638ecd6e",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "be7edf95-ce64-4ae5-99cc-5520518134dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "18ccec09-cfb7-468e-a60f-dceee591653b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator('0x0', true).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator('0x0000000000000000000000000000000000000000', true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "65f84470-ccd1-4007-a996-d13e679b93c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet state = await poaNetworkConsensus.validatorsState(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList();\nstate[0].should.be.true;\nstate[1].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "6dd2a41c-0731-4a7f-88bd-8cac79659b9b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "d8564742-0d29-4dab-bc5c-7d098d623c20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "8818eaaf-b8bd-4a88-bc64-c5bf9e327bd0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "be7edf95-ce64-4ae5-99cc-5520518134dc",
              "18ccec09-cfb7-468e-a60f-dceee591653b",
              "65f84470-ccd1-4007-a996-d13e679b93c1",
              "6dd2a41c-0731-4a7f-88bd-8cac79659b9b",
              "d8564742-0d29-4dab-bc5c-7d098d623c20",
              "8818eaaf-b8bd-4a88-bc64-c5bf9e327bd0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 441,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "de6c23bd-634c-4867-b969-35b9dcaeda25",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1], true).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "483c1055-c595-420b-a4d4-760543d1ca9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "03e4a326-a748-411e-9124-ce6241cfb478",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7750d3a5-4a0f-49c8-8f84-95b0c19c7709",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[2], true).should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "bd807985-4bbb-43d9-84fb-2c19056397e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nconst state = await poaNetworkConsensus.validatorsState(accounts[1]);\nstate[0].should.be.false;\nstate[1].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "9bd4dd93-66f5-4f10-a709-4aa0e49f8570",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nconst finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "adbe8589-08c2-436a-ae03-f08de1c5cf65",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "483c1055-c595-420b-a4d4-760543d1ca9e",
              "03e4a326-a748-411e-9124-ce6241cfb478",
              "7750d3a5-4a0f-49c8-8f84-95b0c19c7709",
              "bd807985-4bbb-43d9-84fb-2c19056397e0",
              "9bd4dd93-66f5-4f10-a709-4aa0e49f8570",
              "adbe8589-08c2-436a-ae03-f08de1c5cf65"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 783,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e52476fa-d4d5-4fc9-b3e9-4d61125e21b6",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by any validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by any validator",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(nonValidator, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: validator}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3f2e999c-d7e7-4e35-af56-89354ec44a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonValidator, {from: nonValidator}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c1411b5a-e170-4d5f-9547-8c1b7770e39d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: validator}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9d2cb037-47f5-40b9-9da6-58e71f636c68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "6413e6fd-4799-450a-b560-7a281dc36002",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets isMasterOfCeremonyInitialized",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets isMasterOfCeremonyInitialized",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyInitialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "0664c479-de01-4a46-92c5-060e0d2d1658",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "f333b8cf-de05-413a-877d-8e6fddc9106c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "5327683f-a245-4f35-bcaa-0ad2ebe2546e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getVotingToChangeKeys",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getVotingToChangeKeys",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newVotingToChangeKeys = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setVotingContractMock(newVotingToChangeKeys);\n(await poaNetworkConsensus.getVotingToChangeKeys()).should.be.equal(newVotingToChangeKeys);",
                "err": {},
                "isRoot": false,
                "uuid": "59eff2eb-0fab-4ce8-bfcc-df173c810880",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f2e999c-d7e7-4e35-af56-89354ec44a21",
              "c1411b5a-e170-4d5f-9547-8c1b7770e39d",
              "9d2cb037-47f5-40b9-9da6-58e71f636c68",
              "6413e6fd-4799-450a-b560-7a281dc36002",
              "0664c479-de01-4a46-92c5-060e0d2d1658",
              "f333b8cf-de05-413a-877d-8e6fddc9106c",
              "5327683f-a245-4f35-bcaa-0ad2ebe2546e",
              "59eff2eb-0fab-4ce8-bfcc-df173c810880"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 403,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4ba4ed42-c019-47c3-9775-7d75b2261cd6",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns address of miner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns address of miner",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "9305a431-ab13-4791-a18f-2748b9202558",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9305a431-ab13-4791-a18f-2748b9202558"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b3410090-601e-4c75-9c26-3ae97881940d",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 496,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9a0d7bb4-4a3d-4821-ab33-cfedadc96094",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b57ab67c-402a-409b-b9f9-b3c959045e3c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 156,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);",
            "err": {},
            "isRoot": false,
            "uuid": "a5cd0b54-c2ac-4737-b2d8-e72bc7e71c33",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "924d1d04-8afc-48be-8870-9d944e94087b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2212fb22-3db3-4281-9aeb-503f560e99ea",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets MoC and Poa",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus()\n);\ntrue.should.be.equal(\n  await proxyStorage.isValidator(masterOfCeremony)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "54484439-b591-4d28-95fe-622f8075443e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54484439-b591-4d28-95fe-622f8075443e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0f46491a-fbd8-411b-9b2b-d2c33ae0fa70",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n).should.be.fulfilled;\nkeysManager.should.be.equal(\n  await proxyStorage.getKeysManager()\n);\nvotingToChangeKeys.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n);\nvotingToChangeMinThreshold.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n);\nvotingToChangeProxy.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n);\nballotsStorage.should.be.equal(\n  await proxyStorage.getBallotsStorage()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManager.should.be.equal(keysManager);\nlogs[0].args.votingToChangeKeys.should.be.equal(votingToChangeKeys);\nlogs[0].args.votingToChangeMinThreshold.should.be.equal(votingToChangeMinThreshold);\nlogs[0].args.votingToChangeProxy.should.be.equal(votingToChangeProxy);\nlogs[0].args.ballotsStorage.should.be.equal(ballotsStorage);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "93e788bb-0649-4acf-8752-f0bfe597d640",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized());\nawait proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4e17d602-9c9d-455d-96bc-63a7f41d51e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "93e788bb-0649-4acf-8752-f0bfe597d640",
              "4e17d602-9c9d-455d-96bc-63a7f41d51e0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ebf77cca-44c7-4065-9cd5-657952fddecd",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 37,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d3b19038-043d-4d2c-9a0d-79cf4e775d4c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeKeys}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5a52a084-05bd-49e8-9126-ef5b0ea55e03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, '0x0000000000000000000000000000000000000000', {from: votingToChangeProxy}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fb8f3282-c359-40d0-a758-c47bceb6fae8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getKeysManager()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "bb326b74-c061-432f-bbbf-ded030f51ee1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(2, accounts[1], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[1].should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "cf27a142-0852-4f48-9ccc-247d3a435701",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(3, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9b32a1ec-6ee7-4b19-b8cd-80d9ed5d3e55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeProxy",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeProxy",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(4, accounts[3], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[3].should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "39b49e3a-ec3d-4280-b1ef-734be2e8ed2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(5, accounts[4], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[4].should.be.equal(\n  await proxyStorage.getBallotsStorage()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "942b4788-09ff-4ba7-abcb-f07cb6c26177",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(6, accounts[5], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3ba38061-0c31-4978-9b31-1fedf87e94db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\nawait proxyStorage.setContractAddress(7, validatorMetadataNew.address, {from: votingToChangeProxy}).should.be.fulfilled;\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5bcfcf22-6abf-45d2-aef0-151ad0f19401",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadataEternalStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadataEternalStorage",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.setContractAddress(8, validatorMetadataEternalStorageNew.address, {from: votingToChangeProxy}).should.be.fulfilled;\nvalidatorMetadataEternalStorageNew.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6ebfc607-2a82-4ee8-89ec-9b023f593a4d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5a52a084-05bd-49e8-9126-ef5b0ea55e03",
              "fb8f3282-c359-40d0-a758-c47bceb6fae8",
              "bb326b74-c061-432f-bbbf-ded030f51ee1",
              "cf27a142-0852-4f48-9ccc-247d3a435701",
              "9b32a1ec-6ee7-4b19-b8cd-80d9ed5d3e55",
              "39b49e3a-ec3d-4280-b1ef-734be2e8ed2b",
              "942b4788-09ff-4ba7-abcb-f07cb6c26177",
              "3ba38061-0c31-4978-9b31-1fedf87e94db",
              "5bcfcf22-6abf-45d2-aef0-151ad0f19401",
              "6ebfc607-2a82-4ee8-89ec-9b023f593a4d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 440,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "57d5a256-2e7e-4463-b649-04dee81ca1ed",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 250,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9ace8098-df41-408d-92ac-c488476aa31e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "238625a2-38c2-4e28-92c1-64fcdd29a670",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 308,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  voting.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  ballotsStorage.address,\n  masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "f83c1a25-a260-4032-ae7e-5bcee4dc3d6c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c550155e-d584-4b6c-8dcd-d6773c5beaf3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4ad02064-9e97-4534-a63a-a63b15b285e2",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor happy path",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId();\nconst {logs} = await voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "c4171fd6-9541-443a-a547-6ac5bfc682f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nlet VOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3497e202-3cdf-4a3d-8b71-8855863d5881",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8369,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey});\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "8ae782c2-e37d-4ce8-9f34-86bba383682c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c4171fd6-9541-443a-a547-6ac5bfc682f0",
              "3497e202-3cdf-4a3d-8b71-8855863d5881",
              "8ae782c2-e37d-4ce8-9f34-86bba383682c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8712,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c3261324-44e9-466d-b7f1-f3f45a2cd461",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 291,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[1], 1, \"memo\", {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "a648ba9c-7862-435e-8291-9feb4a16941c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "b8c930e8-be17-4c05-86f8-15e9dc7f1dc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "33a7ead5-3e3b-4efd-b01a-a0a94a4e5993",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 569,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "f57bd9f5-500d-4b27-87f3-0559778de0f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2403d6a2-8da6-4612-8c6a-af154a9501da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b616bf6d-9641-443c-9952-8be4544a44db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "60e61324-a0c3-4b1a-b503-7283609607ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a8c550ae-1f9f-40ca-8d14-dcaae785a8d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5138577f-90ff-4453-aea6-9846d1fd9f9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b242c8f1-4886-4cc7-a66e-50201aa1b145",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b8c930e8-be17-4c05-86f8-15e9dc7f1dc8",
              "33a7ead5-3e3b-4efd-b01a-a0a94a4e5993",
              "f57bd9f5-500d-4b27-87f3-0559778de0f3",
              "2403d6a2-8da6-4612-8c6a-af154a9501da",
              "b616bf6d-9641-443c-9952-8be4544a44db",
              "60e61324-a0c3-4b1a-b503-7283609607ba",
              "a8c550ae-1f9f-40ca-8d14-dcaae785a8d5",
              "5138577f-90ff-4453-aea6-9846d1fd9f9c",
              "b242c8f1-4886-4cc7-a66e-50201aa1b145"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1422,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ee3c92c3-c41c-4bd3-90cb-b9f9ca431468",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 333,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "ac622509-365f-48d6-b120-e2931365ae4c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it didnot meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it didnot meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 439,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, payoutKeyToAdd, 3, accounts[1], 1, \"memo\",{from: votingKey});\nlet activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 1);\n// console.log(votingId);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    payoutKeyToAdd, //address affectedKey\n    new web3.BigNumber(3), //uint256 affectedKeyType\n    accounts[1],            //address miningKey\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(-1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(1),  //uint256 ballotType\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    miningKeyForVotingKey,   // miningKeyCreator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f3b77a40-da16-4184-92a0-c302a5aac6b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 535,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d3a3fccb-7149-4abe-9417-69e573d93d63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 711,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[5];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "bff90c86-5a17-4941-a0f3-86ed62d3fa9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 1456,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, miningKey, 1, accounts[5], 3, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10749cab-cd6c-490f-8a90-8e6b6da1d2d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 755,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "c08f51b9-8dc3-4fff-a6ac-ca3756b08fba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 819,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "b89eaab8-22a6-46f7-81e0-749c8a5512e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 720,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet votingKeyToAdd = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKeyToAdd, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9bbe66cd-467b-4969-aaf1-756a11ec873b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 723,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "31d5be57-c4b6-4185-880e-50f64c55b49c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 686,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "72d11421-eed7-4c0d-91df-48f56ad22ba5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 730,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3e01df9b-eaec-4e2a-ad55-d65bebe2d7c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 993,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "f309aa0c-d355-44ca-a991-b88a31cb6e4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1088,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, affectedKey, 1, miningKey, 3, \"memo\",{from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE+2, VOTING_END_DATE+2, affectedKey, 1, miningKey, 2, \"memo\",{from: votingKey});\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "aaed0405-7bab-48e2-a4b8-1a55e925bdc8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3b77a40-da16-4184-92a0-c302a5aac6b3",
              "d3a3fccb-7149-4abe-9417-69e573d93d63",
              "bff90c86-5a17-4941-a0f3-86ed62d3fa9a",
              "10749cab-cd6c-490f-8a90-8e6b6da1d2d7",
              "c08f51b9-8dc3-4fff-a6ac-ca3756b08fba",
              "b89eaab8-22a6-46f7-81e0-749c8a5512e8",
              "9bbe66cd-467b-4969-aaf1-756a11ec873b",
              "31d5be57-c4b6-4185-880e-50f64c55b49c",
              "72d11421-eed7-4c0d-91df-48f56ad22ba5",
              "3e01df9b-eaec-4e2a-ad55-d65bebe2d7c4",
              "f309aa0c-d355-44ca-a991-b88a31cb6e4d",
              "aaed0405-7bab-48e2-a4b8-1a55e925bdc8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9655,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1e2fb962-92c9-462a-a196-0c0a27ef58c2",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1443,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b8d39c79-2038-4926-b59d-c27a147c14ad",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "faf8076c-daee-44cb-80d2-4f1d9e6973db",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 850,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await Voting.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  voting.address,\n  masterOfCeremony,\n  ballotsStorage.address,\n  masterOfCeremony\n);\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[5]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[7]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "5804a04e-7832-4634-b312-4a7d3bc10af1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3508d47c-a226-4fbe-ade6-eb585ff848ef",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "66f1ba4b-6c15-4291-801f-8d5f7ea9f304",
            "title": "#createBallotToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold \"before each\" hook",
                "timedOut": false,
                "duration": 12,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "0256ac88-bd35-4c2d-9b04-4b5ab165c3c8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold happy path",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  new web3.BigNumber(4),\n  miningKeyForVotingKey,\n  \"memo\"\n])\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "c0f83db6-a34c-41da-a73f-d29b87e88dcc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "46d018d2-1b0e-4c4f-8690-996636ccae67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4d788bfb-7111-4d23-bddc-c3b449e0651d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8937,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "fa0f41a6-3083-4e64-b420-dcaa5a45b5a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c0f83db6-a34c-41da-a73f-d29b87e88dcc",
              "46d018d2-1b0e-4c4f-8690-996636ccae67",
              "4d788bfb-7111-4d23-bddc-c3b449e0651d",
              "fa0f41a6-3083-4e64-b420-dcaa5a45b5a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9152,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "88bc48ef-768a-4608-8d0e-fd51107726c3",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 129,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "0495b1ca-5af8-49ac-990c-2af29ecfb592",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "2d8265e9-a779-4919-be67-4b075342d391",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "537192f1-89b1-4ad1-b4ff-e7036d0a04d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "8e2fd688-d717-4140-8985-5199fb700b6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5f6deaf9-1ec7-44b5-93ca-68035e4d351e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1eafa98e-fa4d-4c88-a82d-1cdf2444a390",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e2aa92a7-f241-44c2-8c83-7057552f749a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f84e4609-5b59-470f-846c-596a5f978e41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e7b9d245-77fa-403d-8681-356ee0099b15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1cfbbd6b-ec21-473f-a6cd-f7735f0bcf13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d8265e9-a779-4919-be67-4b075342d391",
              "537192f1-89b1-4ad1-b4ff-e7036d0a04d7",
              "8e2fd688-d717-4140-8985-5199fb700b6a",
              "5f6deaf9-1ec7-44b5-93ca-68035e4d351e",
              "1eafa98e-fa4d-4c88-a82d-1cdf2444a390",
              "e2aa92a7-f241-44c2-8c83-7057552f749a",
              "f84e4609-5b59-470f-846c-596a5f978e41",
              "e7b9d245-77fa-403d-8681-356ee0099b15",
              "1cfbbd6b-ec21-473f-a6cd-f7735f0bcf13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1160,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f0725f0d-9a37-4589-b05c-8f6941d6e132",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "ef54d54a-f4ea-49e9-9692-080147ba818b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 358,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\",{from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey,  // creator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "b86d301d-79c0-46bb-a70f-e78013cd740c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 777,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\",{from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(3),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(2),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey,  //creator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new(proxyStorageMock.address);\n\nlet nextId = await votingForKeys.nextBallotId();\nawait votingForKeys.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 3, accounts[1], 1, \"memo\", {from: votingKey});\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "8281051b-a423-406a-8bc3-5d8c864c43f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\").should.be.fulfilled;\nawait keysManager.addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\").should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "a26702a7-7e9c-4596-b67c-165dcedb96f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b86d301d-79c0-46bb-a70f-e78013cd740c",
              "8281051b-a423-406a-8bc3-5d8c864c43f7",
              "a26702a7-7e9c-4596-b67c-165dcedb96f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2238,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "eca8d6b5-0a8f-4a57-9401-360aa73e8fe6",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1352,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "327b5f1d-4edd-4daa-889e-a12e43d409c3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eebf0760-7187-49dd-a1fb-a25e28863f8a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 359,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddress.new(proxyStorageMock.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  voting.address,\n  ballotsStorage.address,\n  validatorMetadataEternalStorage.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "9c231335-3a35-4421-905f-19f5d2577077",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "33a92ee3-6910-41f1-9ec0-831b654b5fd0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ee7b25a8-37c6-4460-aca1-6c9d9b5007bf",
            "title": "#createBallotToChangeProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress \"before each\" hook",
                "timedOut": false,
                "duration": 98,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "9dccc39d-6aab-4b15-8726-6bd2251b7c40",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress happy path",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// uint256 _startTime,\n// uint256 _endTime,\n// address _proposedValue,\n// uint8 _contractType\nconst {logs} = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\", { from: votingKey }\n);\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(1),\n  miningKeyForVotingKey,\n  \"memo\"        \n])\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "e74f60ad-9ad5-4ffc-a712-57cd7bb3e4d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress proposed address should not be 0x0",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', 2, \"memo\",{ from: votingKey }).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d73e8fde-e90d-4e8f-b00c-a144f6a15d48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can creates multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress can creates multiple ballots",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\",{ from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE + 1, VOTING_END_DATE + 1, accounts[5], 2, \"memo\",{ from: votingKey }\n);\nlet votingState = await voting.votingState(nextBallotId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1),\n  new web3.BigNumber(VOTING_END_DATE+1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(2),\n  miningKeyForVotingKey,\n  \"memo\"\n])",
                "err": {},
                "isRoot": false,
                "uuid": "3b86cdd5-9619-4219-aa57-0040bef06408",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8459,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey});\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey});\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "f08f64f7-4f08-4e1c-addf-bb32e9ddc396",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e74f60ad-9ad5-4ffc-a712-57cd7bb3e4d8",
              "d73e8fde-e90d-4e8f-b00c-a144f6a15d48",
              "3b86cdd5-9619-4219-aa57-0040bef06408",
              "f08f64f7-4f08-4e1c-addf-bb32e9ddc396"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8940,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cc5e25bd-302a-4752-a16f-a547db89921c",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 227,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\", { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "93d7f6bd-3439-4bb9-b452-3c6c54231b27",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "5b4a4ca7-9548-406e-933f-6447b8990463",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "deb8b59c-7869-4ffe-8ee9-3f21c2d50917",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 553,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "845d3c9a-95a8-4e04-8beb-e67da3a4cdbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7847cf78-d983-4928-b5ff-12820f61e3cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fe98e810-461c-4ecd-a5be-8b8be9f576b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77bbc165-0489-4199-ab9d-5f8fb50f7b8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "01c7afc2-5f77-4002-aa91-2194807c6882",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b13ab078-c4d4-4d27-8d19-f9a79b33165f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bb6d1eff-8db3-46db-b4b3-cb44cee5b2bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5b4a4ca7-9548-406e-933f-6447b8990463",
              "deb8b59c-7869-4ffe-8ee9-3f21c2d50917",
              "845d3c9a-95a8-4e04-8beb-e67da3a4cdbc",
              "7847cf78-d983-4928-b5ff-12820f61e3cb",
              "fe98e810-461c-4ecd-a5be-8b8be9f576b1",
              "77bbc165-0489-4199-ab9d-5f8fb50f7b8f",
              "01c7afc2-5f77-4002-aa91-2194807c6882",
              "b13ab078-c4d4-4d27-8d19-f9a79b33165f",
              "bb6d1eff-8db3-46db-b4b3-cb44cee5b2bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1381,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e842c5f1-145b-4ed8-b72c-142be370c252",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 397,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "eb240920-f60d-48f5-93bc-6b5a155b1eb2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 358,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], contractType, \"memo\", { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  accounts[5], //porposedValue\n  new web3.BigNumber(contractType),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "e4804ecd-5910-4c39-9f2b-5112283a3fec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getKeysManager address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getKeysManager address",
                "timedOut": false,
                "duration": 525,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getKeysManager());",
                "err": {},
                "isRoot": false,
                "uuid": "46cdd176-c6fc-4ba7-bb82-be7a008deeed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeKeys",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeKeys",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeKeys());",
                "err": {},
                "isRoot": false,
                "uuid": "8f78af65-7091-4e1d-bb86-dd069a22ef2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeMinThreshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeMinThreshold",
                "timedOut": false,
                "duration": 675,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeMinThreshold());",
                "err": {},
                "isRoot": false,
                "uuid": "ac7347e4-20fa-4d70-86da-527e6f17038c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeProxy",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeProxy",
                "timedOut": false,
                "duration": 622,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeProxy());",
                "err": {},
                "isRoot": false,
                "uuid": "336a0815-d3f1-456f-b2b7-c541e4edd858",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getBallotsStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getBallotsStorage",
                "timedOut": false,
                "duration": 602,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getBallotsStorage());",
                "err": {},
                "isRoot": false,
                "uuid": "c0a5811b-dc2b-4ec3-8e56-8d77b8cd9baa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 625,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation());",
                "err": {},
                "isRoot": false,
                "uuid": "cdf9f2ff-0ac4-4a0e-8344-2e29172331cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata storage",
                "timedOut": false,
                "duration": 622,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 8;\nlet validatorMetadataEternalStorageNew = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet newAddress = validatorMetadataEternalStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getValidatorMetadata());",
                "err": {},
                "isRoot": false,
                "uuid": "1c371d76-3399-4022-ad18-a212598aefa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 824,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 4;\nlet contractType2 = 5;\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, newAddress1, contractType1, \"memo\", { from: votingKey }\n);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE+2, VOTING_END_DATE+2, newAddress2, contractType2, \"memo\", { from: votingKey }\n);\n  \nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))\nlet votingState1 = await voting.votingState(votingId);\nvotingState1.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(3), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(2), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  newAddress1, //proposedValue\n  new web3.BigNumber(contractType1),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])\nlet votingState2 = await voting.votingState(votingIdForSecond);\nvotingState2.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2),\n  new web3.BigNumber(VOTING_END_DATE+2),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(-1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  newAddress2, //proposedValue\n  new web3.BigNumber(contractType2),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])",
                "err": {},
                "isRoot": false,
                "uuid": "e7f82800-d2d4-4579-8997-02d4af34df2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e4804ecd-5910-4c39-9f2b-5112283a3fec",
              "46cdd176-c6fc-4ba7-bb82-be7a008deeed",
              "8f78af65-7091-4e1d-bb86-dd069a22ef2b",
              "ac7347e4-20fa-4d70-86da-527e6f17038c",
              "336a0815-d3f1-456f-b2b7-c541e4edd858",
              "c0a5811b-dc2b-4ec3-8e56-8d77b8cd9baa",
              "cdf9f2ff-0ac4-4a0e-8344-2e29172331cb",
              "1c371d76-3399-4022-ad18-a212598aefa4",
              "e7f82800-d2d4-4579-8997-02d4af34df2e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5467,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}